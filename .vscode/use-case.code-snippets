{
	// Place your backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Use case template": {
		"scope": "javascript,typescript",
		"prefix": "T-case",
		"body": [
			"import { ILecturer } from '@exam-cell-features/Lecturers/models/interfaces';",
			"import { LecturerRepositoryType } from '../repository';",
			"import createLecturerEntity from '../entities';",
			"import lecturerModel from '@exam-cell-features/Lecturers/models';",
			"\n",
			"export function $1({",
			"repository",
			"}: {",
			"repository: LecturerRepositoryType;",
			"}) {",
			"return async (lecturerData: ILecturer) => {",
			"const {",
			"getEmail,",
			"getFirstName,",
			"getGender,",
			"getLastName,",
			"getPassword,",
			"getRole,",
			"} = await createLecturerEntity(lecturerData);",
			"const saved = await repository.createNewLecturer({",
			"model: lecturerModel,",
			"})({",
			"email: getEmail(),",
			"firstName: getFirstName(),",
			"lastName: getLastName(),",
			"gender: getGender(),",
			"password: getPassword(),",
			"role: getRole(),",
			"});",
			"\n",
			"return saved;",
			"};",
			"}"
		],
		"description": "Usecase template"
	}
}