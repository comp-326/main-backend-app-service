{"version":3,"sources":["../../src/setup/express.ts"],"names":[],"mappings":";;;;;AACA,iFAAyD;AACzD,8DAAsC;AACtC,kEAAyC;AACzC,gDAAwB;AACxB,sEAA6C;AAC7C,oDAA4B;AAC5B,oDAA4B;AAC5B,oDAA4B;AAC5B,uEAAkD;AAClD,mDAA2B;AAC3B,sDAA+C;AAC/C,4CAAsE;AAEtE,mBAAyB,EAAE,GAAG,EAAwB;IACrD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACzC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAChD,GAAG,CAAC,GAAG,CAAC,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,GAAG,CAAC,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,qBAAc,EAAE,CAAC,CAAC,CAAC;IACjD,GAAG,CAAC,GAAG,CAAC,IAAA,uBAAY,GAAE,CAAC,CAAC;IACxB,GAAG,CAAC,GAAG,CAAC,yBAAc,CAAC,MAAM,mBAAM,uBAAc,EAAG,CAAC,CAAC;IACtD,GAAG,CAAC,GAAG,CAAC,yBAAc,CAAC,WAAW,CAAC,4BAAmB,CAAC,CAAC,CAAC;IACzD,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAC/B,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC1B,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAC1B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;QAAE,GAAG,CAAC,GAAG,CAAC,IAAA,gBAAM,GAAE,CAAC,CAAC;IAE7D,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,IAAA,YAAE,GAAE,CAAC,CAAC;IAC1B,IAAA,eAAK,EAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAGf,GAAG,CAAC,GAAG,CAAC,sBAAY,CAAC,CAAC;IAEtB,OAAO,GAAG,CAAC;AACZ,CAAC;AApBD,4BAoBC","file":"express.js","sourcesContent":["// eslint-disable-next-line camelcase\nimport ErrorHandler from '../common/errors/ErrorHandler';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport expressWinston from 'express-winston';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport pages from './pages';\nimport shouldCompress from '../utils/compression';\nimport v1 from '../api/v1';\nimport express, { Application } from 'express';\nimport { httpErrorLogOptions, httpLogOptions } from '../utils/logger';\n\nexport default function ({ app }: { app: Application }) {\n\tapp.use(express.json({ limit: '30mb' }));\n\tapp.use(express.urlencoded({ extended: true }));\n\tapp.use(morgan('dev'));\n\tapp.use(compression({ filter: shouldCompress }));\n\tapp.use(cookieParser());\n\tapp.use(expressWinston.logger({ ...httpLogOptions }));\n\tapp.use(expressWinston.errorLogger(httpErrorLogOptions));\n\tapp.use(cors({ origin: '*' }));\n\tapp.enable('trust proxy');\n\tapp.set('trust proxy', 1);\n\tif (process.env.NODE_ENV === 'production') app.use(helmet());\n\n\tapp.use('/api/v1/', v1());\n\tpages({ app });\n\n\t/* Error handler */\n\tapp.use(ErrorHandler);\n\n\treturn app;\n}\n"]}