{"version":3,"sources":["../../src/features/users/utils/mail/UserAccountMailer.ts"],"names":[],"mappings":"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","file":"UserAccountMailer.js","sourcesContent":["import { ExpressError } from '../../../../common/errors/ExpressError';\nimport ExamCellAutomatonMailer from '../../../../services/mailService/mailer';\nimport createLinks from '../../../../helpers/createLinks';\nimport { mailConfig } from '../../../../config';\nimport moment from 'moment';\nimport tokenGenerator from '../../../../helpers/tokenGenerator';\nimport {\n\taccountActivationEmailTemplate,\n\tpasswordResetEmailTemplate\n} from '../../../../services/mailService';\n\nclass Accountmailer{\n\tsendPasswordResetLink = () => {\n\t\treturn async function ({\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\temail,\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\t_id\n\t\t}: {\n\t\t\temail: string;\n\t\t\tfirstName: string;\n\t\t\tlastName: string;\n\t\t\t_id: string;\n\t\t}){\n\t\t\tlet sent = false;\n\t\t\tconst token = tokenGenerator.generatePasswordResetToken({ userId: _id })(\n\t\t\t\t'24h'\n\t\t\t);\n\n\t\t\tconst link = createLinks.createForgotPasswordLink(token);\n\t\t\tconst template = passwordResetEmailTemplate({\n\t\t\t\tfirstName,\n\t\t\t\tlastName,\n\t\t\t\tlink\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst res = await ExamCellAutomatonMailer.sendMail({\n\t\t\t\t\tto: email,\n\t\t\t\t\tdate: moment(new Date().getTime()).format('LLLL'),\n\t\t\t\t\tfrom: mailConfig.EMAIL_USER,\n\t\t\t\t\tsender: 'exam cell Info',\n\t\t\t\t\tsubject: 'Reset your password',\n\t\t\t\t\thtml: template\n\t\t\t\t});\n\t\t\t\tres && (sent = true);\n\n\t\t\t\treturn sent;\n\t\t\t} catch (err) {\n\t\t\t\tthrow new ExpressError({\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tdata: {},\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\tstatusCode: 500\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\n\tsendEmailActivationLink = () => {\n\t\treturn async function ({\n\t\t\temail,\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\t_id\n\t\t}: {\n\t\t\temail: string;\n\t\t\tfirstName: string;\n\t\t\tlastName: string;\n\t\t\t_id: string;\n\t\t}){\n\t\t\tlet sent = false;\n\t\t\tconst token = tokenGenerator.generatePasswordResetToken({ userId: _id })(\n\t\t\t\t'24h'\n\t\t\t);\n\n\t\t\tconst link = createLinks.createAccountActivationLink({ token });\n\t\t\tconst template = accountActivationEmailTemplate({\n\t\t\t\tfirstName,\n\t\t\t\tlastName,\n\t\t\t\tlink\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst res = await ExamCellAutomatonMailer.sendMail({\n\t\t\t\t\tto: email,\n\t\t\t\t\tdate: moment(new Date().getTime()).format('LLLL'),\n\t\t\t\t\tsender: 'ExamCellAutomaton Info',\n\t\t\t\t\tfrom: mailConfig.EMAIL_USER,\n\t\t\t\t\tsubject: 'Activate your account',\n\t\t\t\t\thtml: template\n\t\t\t\t});\n\t\t\t\tres && (sent = true);\n\n\t\t\t\treturn sent;\n\t\t\t} catch (err) {\n\t\t\t\tthrow new ExpressError({\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tdata: {},\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\tstatusCode: 500\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n}\n\nexport default new Accountmailer();\n"]}