{"version":3,"sources":["../../src/features/users/utils/userInfoValidator.ts"],"names":[],"mappings":";;;;;AACA,+EAAuD;AAGvD,MAAM,iBAAiB;IAAvB;QACC,iBAAY,GAAG,CAAC,KAAa,EAAE,EAAE;YAChC,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,oBAAU,CAAC,CAAC;YAEzC,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEF,oBAAe,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,EAAyB,EAAE,EAAE;YAC9D,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,IAAI;gBACH,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACrC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,EAAE;wBAC1C,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;wBAC1C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC;wBACpD,IAAI,KAAK,CAAC,IAAI,CAAC,KAAM,CAAC,UAAU,CAAC,CAAC;4BACjC,MAAM,IAAI,oCAAoC,KAAM,CAAC,IAAI,IAAI,CAAC;qBAE/D;iBACD;gBACD,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,EAAE;oBAChC,MAAM,IAAI,uDAAuD,CAAC;gBAEnE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACnC,MAAM,IAAI,qDAAqD,CAAC;gBAEjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACnC,MAAM,IAAI,qDAAqD,CAAC;gBAEjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACnC,MAAM,IAAI,2CAA2C,CAAC;gBAEvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACxC,MAAM,IAAI,+CAA+C,CAAC;gBAE3D,IAAI,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE;oBAC3D,MAAM;wBACL,8DAA8D,CAAC;iBAChE;gBACD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE;oBACxD,MAAM;wBACL,oEAAoE,CAAC;iBACtE;gBACD,IAAI,MAAM,KAAK,EAAE;oBAChB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;gBAE9B,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;aAC5B;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;aAC7B;QACF,CAAC,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,IAAI,iBAAiB,EAAE,CAAC","file":"userInfoValidator.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport emailRegex from '../../../constants/emailRegex';\nimport { IUserValidator, PasswordValidatorType } from '../interfaces';\n\nclass UserInfoValidator implements IUserValidator{\n\tisValidEmail = (email: string) => {\n\t\tconst mailRegex = new RegExp(emailRegex);\n\n\t\treturn mailRegex.test(email);\n\t};\n\n\tisValidPassword = ({ fields, props }: PasswordValidatorType) => {\n\t\tlet errors = '';\n\n\t\ttry {\n\t\t\tfor (const key of Object.keys(props)) {\n\t\t\t\tif (fields.some(f => f.fieldName === key)) {\n\t\t\t\t\tconst regex = new RegExp(props[key], 'i');\n\t\t\t\t\tconst field = fields.find(f => f.fieldName === key);\n\t\t\t\t\tif (regex.test(props!['password'])) \n\t\t\t\t\t\terrors += `Password should not contain your ${field!.name}\\n`;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (props['password'].length > 25) \n\t\t\t\terrors += 'Password must should not be more than 25 characters\\n';\n\t\t\t\n\t\t\tif (!/[a-z]/.test(props['password'])) \n\t\t\t\terrors += 'Password must contain at least 1 lowercase letter\\n';\n\t\t\t\n\t\t\tif (!/[A-Z]/.test(props['password'])) \n\t\t\t\terrors += 'Password must contain at least 1 uppercase letter\\n';\n\t\t\t\n\t\t\tif (!/[0-9]/.test(props['password'])) \n\t\t\t\terrors += 'Password must contain at least a number\\n';\n\t\t\t\n\t\t\tif (!/[\\w]{7,16}/.test(props['password'])) \n\t\t\t\terrors += 'Password must be at least 8 characters long\\n';\n\t\t\t\n\t\t\tif (/[.*+?^${}#%^@!`()|[\\]\\\\]{4,}/.test(props['password'])) {\n\t\t\t\terrors +=\n\t\t\t\t\t'Password must not contain more than 4 repeating characters\\n';\n\t\t\t}\n\t\t\tif (!/[.*+?^${}#%^@!`()|[\\]\\\\]/.test(props['password'])) {\n\t\t\t\terrors +=\n\t\t\t\t\t'Password must be at least 1 special character (.*+?^${}#%^@!`())\\n';\n\t\t\t}\n\t\t\tif (errors !== '') \n\t\t\t\treturn { ok: false, errors };\n\t\t\t\n\t\t\treturn { ok: true, errors };\n\t\t} catch (err) {\n\t\t\treturn { ok: false, errors };\n\t\t}\n\t};\n}\n\nexport default new UserInfoValidator();\n"]}