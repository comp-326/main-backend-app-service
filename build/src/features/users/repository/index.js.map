{"version":3,"sources":["../../src/features/users/repository/index.ts"],"names":[],"mappings":";;;;;AAIA,uDAAkC;AAClC,oEAAmD;AACnD,MAAM,cAAc;IAApB;QAEC,mBAAc,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,MAAM,gBAAS,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;YAEvF,OAAO,IAAI,CAAC;QACb,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,QAAe,EAAE,EAAE;YACtC,MAAM,IAAI,GAAG,MAAM,gBAAa,CAAC,cAAc,EAAE,CAAC;YAClD,MAAM,OAAO,GAAG,MAAM,gBAAS,CAAC,MAAM,iCAClC,QAAQ,KACX,IAAI,IACH,CAAC;YAGH,OAAO,OAAO,CAAC;QAChB,CAAC,CAAC;QAEF,gBAAW,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;YAErC,MAAM,IAAI,GAAG,MAAM,gBAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEhD,OAAO,IAAI,CAAC;QACb,CAAC,CAAC;QAEF,aAAQ,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;YAE/B,MAAM,IAAI,GAAG,MAAM,gBAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAE9D,OAAO,IAAI,CAAC;QACb,CAAC,CAAC;QAEF,SAAI,GAAG,KAAK,EAAE,KAAa,EAAE,IAAY,EAAE,EAAE;YAC5C,MAAM,KAAK,GAAG,MAAM,gBAAS,CAAC,IAAI,CAAC,EAAE,CAAC;iBACpC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC;iBAC9B,KAAK,CAAC,KAAK,CAAC;iBACZ,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YAE3B,OAAO,KAAK,CAAC;QACd,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,EAAU,EAAE,IAAW,EAAE,EAAE;YAC9C,MAAM,OAAO,GAAG,MAAM,gBAAS,CAAC,iBAAiB,CAChD,EAAE,oBACG,IAAI,GACT,EAAE,GAAG,EAAE,IAAI,EAAE,CACb,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAEtB,OAAO,OAAO,CAAC;QAChB,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;YACjC,MAAM,OAAO,GAAG,MAAM,gBAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEtD,OAAO,OAAO,CAAC;QAChB,CAAC,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,IAAI,cAAc,EAAE,CAAC","file":"index.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { IUser } from '../models/interfaces';\nimport { IUserRepository } from '../interfaces';\nimport UserModel from '../models';\nimport UserRoleModel from '../../userRoles/models';\nclass UserRepository implements IUserRepository {\n\n\tsoftDeleteUser = async (id: string) => {\n\t\tconst user = await UserModel.findByIdAndUpdate(id, { isDeleted: true }, { new: true });\n\n\t\treturn user;\n\t};\n\n\tcreateUser = async (userData: IUser) => {\n\t\tconst role = await UserRoleModel.getDefaultRole();\n\t\tconst newUser = await UserModel.create({\n\t\t\t...userData,\n\t\t\trole,\n\t\t});\n\n\n\t\treturn newUser;\n\t};\n\n\tfindByEmail = async (email: string) => {\n\n\t\tconst user = await UserModel.findByEmail(email);\n\n\t\treturn user;\n\t};\n\n\tfindById = async (id: string) => {\n\n\t\tconst user = await UserModel.findById(id).select('+password');\n\n\t\treturn user;\n\t};\n\n\tfind = async (limit: number, page: number) => {\n\t\tconst users = await UserModel.find({})\n\t\t\t.populate('role', 'name -_id ')\n\t\t\t.limit(limit)\n\t\t\t.skip(limit * (page - 1));\n\n\t\treturn users;\n\t};\n\n\tupdateById = async (id: string, data: IUser) => {\n\t\tconst updated = await UserModel.findByIdAndUpdate(\n\t\t\tid,\n\t\t\t{ ...data },\n\t\t\t{ new: true }\n\t\t).select('+password');\n\n\t\treturn updated;\n\t};\n\n\tdeleteById = async (id: string) => {\n\t\tconst deleted = await UserModel.findByIdAndDelete(id);\n\n\t\treturn deleted;\n\t};\n}\n\nexport default new UserRepository();"]}