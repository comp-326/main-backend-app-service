{"version":3,"sources":["../../src/features/users/use-cases/editUserProfile.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAmE;AAGnE,2DAAqC;AACrC,iGAAwE;AAExE,SAAiB,mBAAmB,CAAE,EAAC,UAAU,EAA8B;IAC9E,OAAO,KAAK,EAAE,MAAc,EAAE,QAAe,EAAE,EAAE;QAChD,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE;oBACL,MAAM,EAAE,MAAM;iBACd;aACD,CAAC,CAAC;SACH;QACD,IAAI,CAAC,IAAA,4BAAiB,EAAC,MAAM,CAAC,EAAE;YAC/B,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,gCAAgC;gBACzC,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EAAE;aACR,CAAC,CAAC;SAEH;QACD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEnD,IAAG,CAAC,QAAQ,EAAC;YACZ,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,gBAAgB;gBACzB,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EAAE;aACR,CAAC,CAAC;SACH;QACD,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,EAAC,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,MAAM,IAAA,kBAAU,kCAAM,QAAQ,CAAC,IAAI,GAAI,QAAQ,EAAG,CAAC;QAC9J,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE;YACtD,KAAK,EAAE,QAAQ,EAAE;YACjB,QAAQ,EAAE,WAAW,EAAE;YACvB,SAAS,EAAE,YAAY,EAAE;YACzB,QAAQ,EAAE,WAAW,EAAE;YACvB,MAAM,EAAE,SAAS,EAAE;YACnB,QAAQ,EAAE,WAAW,EAAE;YACvB,GAAG,EAAE,MAAM,EAAE;YACb,cAAc,EAAE,aAAa,EAAE;SAC/B,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACb,CAAC,CAAC;AACH,CAAC;AA7CD,kDA6CC","file":"editUserProfile.js","sourcesContent":["import { ExpressError } from '../../../common/errors/ExpressError';\nimport { IUser } from '../models/interfaces';\nimport { IUserRepository } from '../interfaces';\nimport createUser from '../entities';\nimport validateMongodbId from '../../../utils/mongo/ObjectId-validator';\n\nexport  function makeEditUserProfile ({repository}:{repository:IUserRepository}){\n\treturn async (userId: string, userData: IUser) => {\n\t\tif (!userId) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User id not provided',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\tuserId: userId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!validateMongodbId(userId)) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Please provide a valid user id',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {}\n\t\t\t});\n\n\t\t}\n\t\tconst existing = await repository.findById(userId);\n\t\t\n\t\tif(!existing){\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {}\n\t\t\t});\n\t\t}\n\t\tconst { getBio, getEmail, getFirstName, getIsActive,getGender, getLastName, getPassword, getProfilePic } = await createUser({ ...existing._doc,...userData });\n\t\tconst user = await repository.updateById(existing._id, {\n\t\t\temail: getEmail(),\n\t\t\tisActive: getIsActive(),\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tgender: getGender(),\n\t\t\tpassword: getPassword(),\n\t\t\tbio: getBio(),\n\t\t\tprofilePicture: getProfilePic()\n\t\t});\n\n\t\treturn user;\n\t};\n}"]}