{"version":3,"sources":["../../src/features/users/use-cases/resetPassword.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAmE;AAGnE,2DAAqC;AACrC,2EAAmD;AAEnD,SAAgB,aAAa,CAAC,EAAC,UAAU,EAA8B;IACtE,OAAO,KAAK,EAAE,KAAa,EAAE,IAAmD,EAAE,EAAE;QACnF,IAAI,CAAC,KAAK,EAAE;YACX,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,mBAAmB;gBAC5B,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE;oBACL,KAAK;iBACL;aACD,CAAC,CAAC;SACH;QACD,MAAM,EAAC,MAAM,EAAC,GAAE,MAAM,kBAAQ,CAAC,iBAAiB,CAAC,KAAK,CAA8B,CAAC;QAErF,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,kBAAkB;gBAC3B,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE;oBACL,KAAK;iBACL;aACD,CAAC,CAAC;SACH;QACD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,EAAE;YACd,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,gBAAgB;gBACzB,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE;oBACL,MAAM;iBACN;aACD,CAAC,CAAC;SACH;QACD,IAAI,QAAQ,CAAC,SAAS,EAAE;YACvB,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,+BAA+B;gBACxC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EACL;aACD,CAAC,CAAC;SACH;QACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACvB,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,4BAA4B;gBACrC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EACL;aACD,CAAC,CAAC;SACH;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACnB,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EACL;aACD,CAAC,CAAC;SACH;QACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC1B,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,8BAA8B;gBACvC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EACL;aACD,CAAC,CAAC;SACH;QACD,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,eAAe,EAAE;YAC3C,MAAM,IAAI,2BAAY,CAAC;gBACtB,OAAO,EAAE,wBAAwB;gBACjC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,EACL;aACD,CAAC,CAAC;SACH;QACD,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,MAAM,IAAA,kBAAU,kCAAM,QAAQ,CAAC,IAAI,KAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAG,CAAC;QAC/J,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE;YACtD,KAAK,EAAE,QAAQ,EAAE;YACjB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,YAAY,EAAE;YACzB,QAAQ,EAAE,WAAW,EAAE;YACvB,MAAM,EAAE,SAAS,EAAE;YACnB,QAAQ,EAAE,WAAW,EAAE;YACvB,GAAG,EAAE,MAAM,EAAE;YACb,cAAc,EAAE,aAAa,EAAE;SAC/B,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAGb,CAAC,CAAC;AACH,CAAC;AAhGD,sCAgGC","file":"resetPassword.js","sourcesContent":["import { ExpressError } from '../../../common/errors/ExpressError';\nimport { IUserRepository } from './../interfaces/index';\nimport { JWTPayloadType } from '../../../common/types';\nimport createUser from '../entities';\nimport tokenGEN from '../../../utils/jwt/tokenGEN';\n\nexport function resetPassword({repository}:{repository:IUserRepository}){\n\treturn async (token: string, data: { password: string, confirmPassword: string }) => {\n\t\tif (!token) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst {userId} =await tokenGEN.decodeSimpleToken(token) as unknown as JWTPayloadType;\n\t\t\n\t\tif (!userId) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is invalid',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst existing = await repository.findById(userId);\n\t\tif (!existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\tuserId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (existing.isDeleted) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account has been deleted',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!existing.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account not activated',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!data.password) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Password is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!data.confirmPassword) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Confirm password is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (data.password !== data.confirmPassword) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Passwords do not match',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst { getBio, getEmail, getFirstName, getGender, getLastName, getPassword, getProfilePic } = await createUser({ ...existing._doc, password: data.password });\n\t\tconst user = await repository.updateById(existing._id, {\n\t\t\temail: getEmail(),\n\t\t\tisActive: true,\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tgender: getGender(),\n\t\t\tpassword: getPassword(),\n\t\t\tbio: getBio(),\n\t\t\tprofilePicture: getProfilePic()\n\t\t});\n\t\n\t\treturn user;\n\n\n\t};\n}"]}