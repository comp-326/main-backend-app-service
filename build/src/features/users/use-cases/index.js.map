{"version":3,"sources":["../../src/features/users/use-cases/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExpressError } from '../../../common/errors/ExpressError';\nimport { IUser } from '../models/interfaces';\nimport { JWTPayloadType } from '../../../common/types';\nimport createUser from '../entities';\nimport { deleteFile } from '../../../utils/fileSystem';\nimport entity from '../entities';\nimport tokenGEN from '../../../utils/jwt/tokenGEN';\nimport validateMongodbId from '../../../utils/mongo/ObjectId-validator';\nimport { IUserRepository, IUserUseCases } from '../interfaces';\n\n\nexport class UserUseCase implements IUserUseCases {\n\tprivate readonly repository: IUserRepository;\n\n\tconstructor(repository: IUserRepository) {\n\t\tthis.repository = repository;\n\t}\n\n\teditUserProfilePic = async (userId: string, userData: IUser & { file: Express.Multer.File }) => {\n\t\tif (!userId && userData.file) {\n\t\t\tawait deleteFile(userData.file.path);\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'User id not provided',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400\n\t\t\t});\n\t\t}\n\t\tif (!validateMongodbId(userId) && userData.file) {\n\t\t\tawait deleteFile(userData.file.path);\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Please provide a valid user id',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400\n\t\t\t});\n\t\t}\n\n\t\treturn { done: userData };\n\t};\n\n\taddNewUser = async (userData: IUser) => {\n\t\tconst { getBio, getEmail, getFirstName, getGender, getIsActive, getIsDelete, getLastName, getPassword, getProfilePic, getRole } = await entity(userData);\n\t\tconst existing = await this.repository.findByEmail(getEmail());\n\t\tif (existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User already exists',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t\temail: getEmail()\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t\tconst user = await this.repository.createUser({\n\t\t\temail: getEmail(),\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tpassword: getPassword(),\n\t\t\tgender: getGender(),\n\t\t\tbio: getBio(),\n\t\t\tisActive: getIsActive(),\n\t\t\tisDeleted: getIsDelete(),\n\t\t\tprofilePicture: getProfilePic(),\n\t\t\trole: getRole()\n\t\t});\n\n\t\treturn user;\n\n\t};\n\n\tsendAccountActivationLink = async (email: string) => {\n\t\tif (!email) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Email is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst existing = await this.repository.findByEmail(email);\n\t\tif (!existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (existing.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account already activated',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn existing;\n\t};\n\n\n\teditUserProfile = async (userId: string, userData: IUser) => {\n\t\tif (!userId) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User id not provided',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\tuserId: userId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!validateMongodbId(userId)) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Please provide a valid user id',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {}\n\t\t\t});\n\n\t\t}\n\t\tconst existing = await this.repository.findById(userId);\n\t\t\n\t\tif(!existing){\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {}\n\t\t\t});\n\t\t}\n\t\tconst { getBio, getEmail, getFirstName, getIsActive,getGender, getLastName, getPassword, getProfilePic } = await createUser({ ...existing._doc,...userData });\n\t\tconst user = await this.repository.updateById(existing._id, {\n\t\t\temail: getEmail(),\n\t\t\tisActive: getIsActive(),\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tgender: getGender(),\n\t\t\tpassword: getPassword(),\n\t\t\tbio: getBio(),\n\t\t\tprofilePicture: getProfilePic()\n\t\t});\n\n\n\t\treturn user;\n\t};\n\n\tlistUserById = async (id: string) => {\n\t\tif (!id) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User id not provided',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\tuserId: id\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!validateMongodbId(id)) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Please provide a valid user id',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {}\n\t\t\t});\n\t\t}\n\t\tconst user= await this.repository.findById(id);\n\t\tif(!user){\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User profile not found',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {}\n\t\t\t});\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tconst {password:_docs,...props}=user._doc;\n\n\t\treturn props;\n\t};\n\n\tlistUserByEmail = async (email: string) => {\n\t\tif (!email) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Email not provided',\n\t\t\t\tstatus: 'error',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\temail: email\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst user = await this.repository.findByEmail(email);\n\t\tif (!user) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tconst {password:_do,...props}=user._doc;\n\n\t\treturn props;\n\t};\n\n\tlistUsers = async ({ limit, offset }: { limit: number; offset: number; }) => {\n\t\tconst users = await this.repository.find(limit, offset);\n\t\tif (users.length === 0) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'No users found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn users;\n\t};\n\n\tactivateUserAccount = async (token: string) => {\n\t\tconst { userId ,email} =await tokenGEN.decodeSimpleToken(token) as unknown as JWTPayloadType;\n\t\tif (!email) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Email is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst existing = await this.repository.findByEmail(email);\n\t\tif (!existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (existing.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account already activated',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (existing.isDeleted) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account has been deleted',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!userId) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is invalid',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (userId !== existing.id) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is invalid',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst { getBio, getEmail, getFirstName, getGender, getLastName, getPassword, getProfilePic } = await createUser({ ...existing._doc, isActive: true });\n\t\tconst user = await this.repository.updateById(existing._id, {\n\t\t\temail: getEmail(),\n\t\t\tisActive: true,\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tgender: getGender(),\n\t\t\tpassword: getPassword(),\n\t\t\tbio: getBio(),\n\t\t\tprofilePicture: getProfilePic()\n\t\t});\n\n\t\treturn user;\n\t};\n\n\tresetPassword = async (token: string, data: { password: string, confirmPassword: string }) => {\n\t\tif (!token) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst {userId} =await tokenGEN.decodeSimpleToken(token) as unknown as JWTPayloadType;\n\t\t\n\t\tif (!userId) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Token is invalid',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst existing = await this.repository.findById(userId);\n\t\tif (!existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\tuserId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (existing.isDeleted) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account has been deleted',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!existing.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account not activated',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!data.password) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Password is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!data.confirmPassword) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Confirm password is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (data.password !== data.confirmPassword) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Passwords do not match',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tconst { getBio, getEmail, getFirstName, getGender, getLastName, getPassword, getProfilePic } = await createUser({ ...existing._doc, password: data.password });\n\t\tconst user = await this.repository.updateById(existing._id, {\n\t\t\temail: getEmail(),\n\t\t\tisActive: true,\n\t\t\tfirstName: getFirstName(),\n\t\t\tlastName: getLastName(),\n\t\t\tgender: getGender(),\n\t\t\tpassword: getPassword(),\n\t\t\tbio: getBio(),\n\t\t\tprofilePicture: getProfilePic()\n\t\t});\n\t\n\t\treturn user;\n\n\n\t};\n\n\n\tsoftRemoveUser = async (id: string) => {\n\t\tconst user = await this.repository.softDeleteUser(id);\n\n\t\treturn user;\n\t};\n\n\thardRemoveUser = async (id: string) => {\n\t\tconst user = await this.repository.deleteById(id);\n\n\t\treturn user;\n\t};\n\n\n\tsendPasswordResetLink = async (email: string) => {\n\t\tif (!email) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'Email is required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst existing = await this.repository.findByEmail(email);\n\t\tif (!existing) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User not found',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tdata: {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!existing.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tmessage: 'User account not activated',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 409,\n\t\t\t\tdata: {\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\treturn existing;\n\t};\n\n}"]}