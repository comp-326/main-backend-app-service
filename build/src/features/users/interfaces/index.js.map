{"version":3,"sources":["../../src/features/users/interfaces/index.ts"],"names":[],"mappings":"","file":"index.js","sourcesContent":["/* eslint-disable no-mixed-spaces-and-tabs */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IUser } from '../models/interfaces';\nimport { INext,IRequest,IResponse } from '../../../common/types';\n\n\ntype FilesType =\n\t| {\n\t\t\t[fieldname: string]: Express.Multer.File[];\n\t  }\n\t| Express.Multer.File[]\n\t| undefined;\n\nexport interface IUserRequest {\n\tparams: any;\n\tbody: any;\n\tquery: any;\n\theaders: any;\n\tfiles?: FilesType;\n\tfile?: Express.Multer.File | undefined;\n}\n\nexport interface IUserRepository {\n\tcreateUser: (data: IUser) => Promise<any>;\n\tfindByEmail: (email: string) => Promise<any>;\n\tfindById: (id: string) => Promise<any>;\n\tfind: (limit: number, page: number) => Promise<any>;\n\tupdateById: (id: string, data: IUser) => Promise<any>;\n\tdeleteById: (id: string) => Promise<any>;\n\tsoftDeleteUser: (id: string) => Promise<any>;\n}\n\nexport type PasswordValidatorType = {\n\tprops: { [x: string]: string };\n\tfields: { fieldName: string; name: string }[];\n};\n\nexport interface IUserValidator {\n\tisValidEmail: (email: string) => boolean;\n\tisValidPassword: (body: PasswordValidatorType) => {\n\t\tok: boolean;\n\t\terrors: string;\n\t};\n}\n\nexport interface IPassword {\n\thashPassword: (password: string) => Promise<string>;\n\tcomparePassword: (password: string, hash: string) => Promise<boolean>;\n}\n\n\nexport  interface IUserController {\n\tsoftDeleteUser:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tcreateUser:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tdeleteUser:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tfindUserByEmail:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tfindUserById:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tgetAccountActivationLink:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tgetPasswordResetLink:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tactivateAccount:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tfindUsers:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tupdateAccount:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tupdateProfilePic:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n\tupdatePassword:(req: IRequest, res: IResponse,next:INext) => Promise<any>;\n}\n\nexport type IUserData =\n\t| 'email'\n\t| 'dateOfBirth'\n\t| 'firstName'\n\t| 'lastName'\n\t| 'isActive'\n\t| 'avatar'\n\t| '_id';\n\nexport interface IUserUseCases {\n\n\t\taddNewUser: (userData: IUser) => Promise<any>;\n\t\teditUserProfilePic: (userId:string,userData: IUser&{file:Express.Multer.File}) => Promise<any>;\n\t\teditUserProfile: (userId:string,userData: IUser) => Promise<any>;\n\t\tlistUserById: (id: string) => Promise<any>;\n\t\tlistUserByEmail: (email: string) => Promise<any>;\n\t\tlistUsers: (query: {\n\t\t\tlimit: number;\n\t\t\toffset: number;\n\t\t\tquery?: any;\n\t\t}) => Promise<any>;\n\t\tactivateUserAccount: (token:string) => Promise<any>;\n\t\tresetPassword: (token:string,data:{\n\t\t\tpassword:string\n\t\t\tconfirmPassword:string\n\t\t}) => Promise<any>;\n\t\tsoftRemoveUser: (id:string) => Promise<any>;\n\t\thardRemoveUser: (id:string) => Promise<any>;\n\t\tsendAccountActivationLink: (email:string) => Promise<any>;\n\t\tsendPasswordResetLink: (email:string) => Promise<any>;\n\t}\n\t"]}