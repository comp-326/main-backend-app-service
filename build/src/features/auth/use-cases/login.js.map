{"version":3,"sources":["../../src/features/auth/use-cases/login.ts"],"names":[],"mappings":";;;;;AACA,sEAAmE;AAGnE,yEAAiD;AAIjD,SAAwB,kBAAkB,CAAC,EAAE,UAAU,EAAmC;IACzF,OAAO,KAAK,EAAE,QAAsC,EAAgB,EAAE;QACrE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACpB,MAAM,IAAI,2BAAY,CAAC;gBACtB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,gBAAgB;gBACzB,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;aACf,CAAC,CAAC;SACH;QACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACvB,MAAM,IAAI,2BAAY,CAAC;gBACtB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,mBAAmB;gBAC5B,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;aACf,CAAC,CAAC;SACH;QACD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,EAAE;YACV,MAAM,IAAI,2BAAY,CAAC;gBACtB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,wBAAwB;gBACjC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;aACf,CAAC,CAAC;SACH;QACD,IAAI,CAAC,CAAC,MAAM,mBAAS,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;YACzE,MAAM,IAAI,2BAAY,CAAC;gBACtB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,2BAA2B;gBACpC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;aACf,CAAC,CAAC;SACH;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACnB,MAAM,IAAI,2BAAY,CAAC;gBACtB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,uBAAuB;gBAChC,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,GAAG;aACf,CAAC,CAAC;SACH;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC;AACH,CAAC;AA9CD,qCA8CC","file":"login.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExpressError } from '../../../common/errors/ExpressError';\nimport { IAuthRepository } from '../interfaces';\nimport { IUser } from '../../users/models/interfaces';\nimport passwords from '../../../utils/passwords';\n\ntype IUserData = { email: string; password: string }\n\nexport default function createLoginUseCase({ repository }: { repository: IAuthRepository }) {\n\treturn async (userData: Pick<IUser, keyof IUserData>): Promise<any> => {\n\t\tif (!userData.email) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Email required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400\n\t\t\t});\n\t\t}\n\t\tif (!userData.password) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Password required',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 400\n\t\t\t});\n\t\t}\n\t\tconst user = await repository.getUserByEmail(userData.email);\n\t\tif (!user) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Account does not exist',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404\n\t\t\t});\n\t\t}\n\t\tif (!(await passwords.comparePassword(userData.password, user.password))) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Invalid login credentials',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404\n\t\t\t});\n\t\t}\n\t\tif (!user.isActive) {\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata: {},\n\t\t\t\tmessage: 'Account is not active',\n\t\t\t\tstatus: 'warning',\n\t\t\t\tstatusCode: 404\n\t\t\t});\n\t\t}\n\n\t\treturn user._doc;\n\t};\n}"]}