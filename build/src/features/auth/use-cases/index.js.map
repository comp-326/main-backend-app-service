{"version":3,"sources":["../../src/features/auth/use-cases/index.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAmE;AAEnE,yEAAiD;AAGjD,MAAa,WAAW;IACvB,YAA6B,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;QAEvD,UAAK,GAAC,KAAK,EAAE,QAAiE,EAAE,EAAE;YACjF,IAAG,CAAC,QAAQ,CAAC,KAAK,EAAC;gBAClB,MAAM,IAAI,2BAAY,CAAC;oBACtB,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,gBAAgB;oBACxB,MAAM,EAAC,SAAS;oBAChB,UAAU,EAAC,GAAG;iBACd,CAAC,CAAC;aACH;YACD,IAAG,CAAC,QAAQ,CAAC,QAAQ,EAAC;gBACrB,MAAM,IAAI,2BAAY,CAAC;oBACtB,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,mBAAmB;oBAC3B,MAAM,EAAC,SAAS;oBAChB,UAAU,EAAC,GAAG;iBACd,CAAC,CAAC;aACH;YACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClE,IAAG,CAAC,IAAI,EAAC;gBACR,MAAM,IAAI,2BAAY,CAAC;oBACtB,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,wBAAwB;oBAChC,MAAM,EAAC,SAAS;oBAChB,UAAU,EAAC,GAAG;iBACd,CAAC,CAAC;aACH;YACD,IAAG,CAAC,CAAC,MAAM,mBAAS,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC;gBACtE,MAAM,IAAI,2BAAY,CAAC;oBACtB,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,2BAA2B;oBACnC,MAAM,EAAC,SAAS;oBAChB,UAAU,EAAC,GAAG;iBACd,CAAC,CAAC;aACH;YACD,IAAG,CAAC,IAAI,CAAC,QAAQ,EAAC;gBACjB,MAAM,IAAI,2BAAY,CAAC;oBACtB,IAAI,EAAC,EAAE;oBACP,OAAO,EAAC,uBAAuB;oBAC/B,MAAM,EAAC,SAAS;oBAChB,UAAU,EAAC,GAAG;iBACd,CAAC,CAAC;aACH;YAED,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC,CAAC;IA9CuD,CAAC;CA+C1D;AAhDD,kCAgDC","file":"index.js","sourcesContent":["import { ExpressError } from '../../../common/errors/ExpressError';\nimport { IUser } from '../../users/models/interfaces';\nimport passwords from '../../../utils/passwords';\nimport {IAuthRepository, IAuthUseCase} from './../interfaces'; \n\nexport class AuthUseCase implements IAuthUseCase{\n\tconstructor(private readonly repository:IAuthRepository){}\n\n\tlogin=async (userData: Pick<IUser, keyof { email: string; password: string; }>) =>{\n\t\tif(!userData.email){\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata:{},\n\t\t\t\tmessage:'Email required',\n\t\t\t\tstatus:'warning',\n\t\t\t\tstatusCode:400\n\t\t\t});\n\t\t}\n\t\tif(!userData.password){\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata:{},\n\t\t\t\tmessage:'Password required',\n\t\t\t\tstatus:'warning',\n\t\t\t\tstatusCode:400\n\t\t\t});\n\t\t}\n\t\tconst user = await this.repository.getUserByEmail(userData.email);\n\t\tif(!user){\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata:{},\n\t\t\t\tmessage:'Account does not exist',\n\t\t\t\tstatus:'warning',\n\t\t\t\tstatusCode:404\n\t\t\t});\n\t\t}\n\t\tif(!(await passwords.comparePassword(userData.password,user.password))){\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata:{},\n\t\t\t\tmessage:'Invalid login credentials',\n\t\t\t\tstatus:'warning',\n\t\t\t\tstatusCode:404\n\t\t\t});\n\t\t}\n\t\tif(!user.isActive){\n\t\t\tthrow new ExpressError({\n\t\t\t\tdata:{},\n\t\t\t\tmessage:'Account is not active',\n\t\t\t\tstatus:'warning',\n\t\t\t\tstatusCode:404\n\t\t\t});\n\t\t}\n\n\t\treturn user._doc;\n\t};\n}"]}