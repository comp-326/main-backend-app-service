{"version":3,"sources":["../../src/features/auth/controllers/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,2EAAmD;AAKnD,MAAa,cAAc;IAC1B,YAA6B,WAAyB;QAAzB,gBAAW,GAAX,WAAW,CAAc;QAEtD,UAAK,GAAG,KAAK,EAAE,GAAa,EAAE,GAAc,EAAE,IAAW,EAAE,EAAE;YAC5D,IAAI;gBAEH,MAAM,KAA+B,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAArE,EAAE,QAAQ,EAAE,IAAI,OAAqD,EAAhD,KAAK,cAA1B,YAA4B,CAAyC,CAAC;gBAC5E,MAAM,SAAS,GAAG,kBAAQ,CAAC,oBAAoB,CAAC;oBAC/C,MAAM,EAAE,KAAK,CAAC,GAAG;oBACjB,KAAK,EAAE,KAAK,CAAC,KAAK;iBAClB,CAAC,CAAC;gBAkBH,OAAO,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,SAAS,EAAE;oBAC5C,QAAQ,EAAE,IAAI;oBACd,MAAM,EAAE,IAAI;oBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;oBAC/B,IAAI,EAAE,GAAG;iBACT,CAAC,CAAC,IAAI,CAAC;oBACP,OAAO,EAAE,kBAAkB;oBAC3B,IAAI,EAAE,KAAK;iBACX,CAAC,CAAC;aACH;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;aACjB;QAEF,CAAC,CAAC;QAGF,WAAM,GAAG,KAAK,EAAE,GAAa,EAAE,GAAc,EAAE,IAAW,EAAE,EAAE;YAE7D,OAAO,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACvD,OAAO,EAAE,iCAAiC;gBAC1C,OAAO,EAAE,IAAI;aACb,CAAC,CAAC;QACJ,CAAC,CAAC;IAjDwD,CAAC;CAmD3D;AApDD,wCAoDC","file":"index.js","sourcesContent":["// import { ExpressError } from '@backend-service/common/errors/ExpressError';\nimport tokenGEN from '../../../utils/jwt/tokenGEN';\nimport { IAuthController, IAuthUseCase } from '../interfaces';\nimport { INext, IRequest, IResponse } from '../../../common/types';\n\n\nexport class AuthController implements IAuthController {\n\tconstructor(private readonly authUseCase: IAuthUseCase) { }\n\n\tlogin = async (req: IRequest, res: IResponse, next: INext) => {\n\t\ttry {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst { password: _use, ...props } = await this.authUseCase.login(req.body);\n\t\t\tconst authToken = tokenGEN.generateEncodedToken({\n\t\t\t\tuserId: props._id,\n\t\t\t\temail: props.email\n\t\t\t});\n\n\t\t\t// if(req.headers.cookie){\n\t\t\t// \tconst cookies = req.headers.cookie.split(';');\n\t\t\t// \tcookies.forEach(cookie => {\n\t\t\t// \t\tif(cookie.includes('access_token')){\n\t\t\t// \t\t\tthrow new ExpressError({\n\t\t\t// \t\t\t\tmessage: 'You are already logged in',\n\t\t\t// \t\t\t\tdata:{},\n\t\t\t// \t\t\t\tstatus:'warning',\n\t\t\t// \t\t\t\tstatusCode: 401\n\t\t\t\t\t\t\n\t\t\t// \t\t\t});\n\t\t\t// \t\t}\n\t\t\t// \t});\n\t\t\t// }\n\t\t\t// req.cookies.\n\n\t\t\treturn res.cookie('access_token', authToken, {\n\t\t\t\thttpOnly: true,\n\t\t\t\tsecure: true,\n\t\t\t\tmaxAge: 1000 * 60 * 60 * 24 * 7,\n\t\t\t\tpath: '/'\n\t\t\t}).json({\n\t\t\t\tmessage: 'Login successful',\n\t\t\t\tuser: props\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treturn next(err);\n\t\t}\n\n\t};\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tlogout = async (req: IRequest, res: IResponse, next: INext) => {\n\n\t\treturn res.clearCookie('access_token').status(200).json({\n\t\t\tmessage: 'Account successfully logged out',\n\t\t\tsuccess: true\n\t\t});\n\t};\n\n}"]}