{"version":3,"sources":["../../src/uploader/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { BASE_DIR } from '../config';\nimport { createDirectory } from '../utils/fileSystem';\nimport multer from 'multer';\nimport path from 'path';\n\n/**\n * ************************* UPLOAD ONLY VIDEOS *****************\n */\nconst videoStorage = multer.diskStorage({\n\tdestination: (req, file, cb) => {\n\t\tconst uploadPath = path.join(BASE_DIR, 'public/uploads/videos');\n\t\tcreateDirectory(uploadPath);\n\t\tcb(null, uploadPath);\n\t},\n\tfilename: (req, file, cb) => {\n\t\tconst fileName = `video_file_upload_${new Date().getTime()}${path.extname(\n\t\t\tfile.originalname\n\t\t)}`;\n\t\tcb(null, fileName);\n\t}\n});\nconst videoFileFilters: multer.Options['fileFilter'] = (req, file, cb) => {\n\tconst mime = file.mimetype;\n\tif (\n\t\tmime === 'video/mp4' ||\n\t\tmime === 'application/x-mpegURL' ||\n\t\tmime === 'video/MP2T' ||\n\t\tmime === 'video/3gpp' ||\n\t\tmime === 'video/x-fvl' ||\n\t\tmime === 'video/quicktime' ||\n\t\tmime === 'video/x-ms-wmv' ||\n\t\tmime === 'video/x-matroska'\n\t) \n\t\tcb(null, true);\n\t\n\tcb(null, false);\n};\n\n/**\n * ************************* UPLOAD ONLY AUDIOS *********************\n */\nconst audioStorage = multer.diskStorage({\n\tdestination: (req, file, cb) => {\n\t\tconst uploadPath = path.join(BASE_DIR, 'public/uploads/audio');\n\t\tcreateDirectory(uploadPath);\n\t\tcb(null, uploadPath);\n\t},\n\tfilename: (req, file, cb) => {\n\t\tconst fileName = `audio_file_upload_${new Date().getTime()}${path.extname(\n\t\t\tfile.originalname\n\t\t)}`;\n\t\tcb(null, fileName);\n\t}\n});\nconst audioFileFilters: multer.Options['fileFilter'] = (req, file, cb) => {\n\tconst mime = file.mimetype;\n\tif (\n\t\tmime === 'auido/L24' ||\n\t\tmime === 'audio/mid' ||\n\t\tmime === 'audio/mpeg' ||\n\t\tmime === 'audio/mp4' ||\n\t\tmime === 'audio/x-mpegurl' ||\n\t\tmime === 'audio/ogg' ||\n\t\tmime === 'audio/vnd.wav' ||\n\t\tmime === 'audio/x-aiff' ||\n\t\tmime === 'audio/basic' ||\n\t\tmime === 'audio/x-matroska'\n\t) \n\t\tcb(null, true);\n\t\n\tcb(null, false);\n};\n\n/**\n * ************************* UPLOAD ONLY IMAGES *********************\n */\nconst imageStorage = multer.diskStorage({\n\tdestination: (req, file, cb) => {\n\t\tconst uploadPath = path.join(BASE_DIR, 'public/uploads/images');\n\t\tcreateDirectory(uploadPath);\n\t\tcb(null, uploadPath);\n\t},\n\tfilename: (req, file, cb) => {\n\t\tconst fileName = `image_file_upload_${new Date().getTime()}${path.extname(\n\t\t\tfile.originalname\n\t\t)}`;\n\t\tcb(null, fileName);\n\t}\n});\nconst imageFilters: multer.Options['fileFilter'] = (req, file, cb) => {\n\tconst mime = file.mimetype;\n\tif (\n\t\tmime === 'image/png' ||\n\t\tmime === 'image/jpg' ||\n\t\tmime === 'image/jpeg' ||\n\t\tmime === 'image/webp'\n\t) \n\t\tcb(null, true);\n\t\n\tcb(null, false);\n};\n\nconst imageUpload = multer({\n\tstorage: imageStorage,\n\tfileFilter: imageFilters,\n\tlimits: { fileSize: 1024 * 1024 * 3 }\n});\n\nconst videoUpload = multer({\n\tstorage: videoStorage,\n\tfileFilter: videoFileFilters,\n\tlimits: { fileSize: 1024 * 1024 * 20 }\n});\n\nconst audioUpload = multer({\n\tstorage: audioStorage,\n\tfileFilter: audioFileFilters,\n\tlimits: { fileSize: 1024 * 1024 * 10 }\n});\n\nexport default Object.freeze({ audioUpload, imageUpload, videoUpload });\n\nexport { audioUpload, imageUpload, videoUpload };\n"]}