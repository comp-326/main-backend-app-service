{"version":3,"sources":["../../src/databases/mongodb/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import chalk from 'chalk';\nimport moment from 'moment';\nimport mongoose from 'mongoose';\nimport path from 'path';\nimport winston from 'winston';\nimport { BASE_DIR, DB_URL, environmentConfig } from '../../config';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst { NODE_ENV } = environmentConfig;\n\n\nconst logger = winston.createLogger({\n\tformat: winston.format.json(),\n\tdefaultMeta: { service: 'user-service' },\n\ttransports: [\n\t\tnew winston.transports.Console(),\n\t\tnew winston.transports.File({\n\t\t\tfilename: path.join(path.dirname(BASE_DIR), 'logs', 'db-logs.json'),\n\t\t\tlevel: 'error'\n\t\t})\n\t],\n\texitOnError: false\n});\nconst options = {\n\tautoIndex: true, // Don't build indexes\n\tmaxPoolSize: 10, // Maintain up to 10 socket connections\n\tserverSelectionTimeoutMS: 50000, // Keep trying to send operations for 10 seconds\n\tsocketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n\tfamily: 4 // Use IPv4, skip trying IPv6\n};\n\nmongoose.connect(DB_URL, options);\n\nmongoose.connection.on('connected', () => {\n\tconst time = moment(new Date().getTime()).format('LLLL');\n\tlogger.info({\n\t\tmessage: 'Mongoose connected',\n\t\ttimestamp: time,\n\t\tlevel: 'info',\n\t\tservice: 'Mongoose',\n\t\tenvironment: NODE_ENV,\n\t});\n});\nmongoose.connection.on('disconnected', () => {\n\tlogger.info({\n\t\tmessage: 'Mongoose dis-connected',\n\t\ttimestamp: `${moment(new Date().getTime()).format('LLLL')}`,\n\t\tlevel: 'info',\n\t\tservice: 'Mongoose',\n\t\tenvironment: NODE_ENV\n\t});\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmongoose.connection.on('error', (err: any) => {\n\tconst time = moment(new Date().getTime()).format('LLLL');\n\tlogger.error({\n\t\tmessage: 'Mongoose Disconnected',\n\t\treason: `${err.message}`,\n\t\ttimestamp: `${time}`,\n\t\tlevel: 'info',\n\t\tservice: 'Mongoose',\n\t\tenvironment: NODE_ENV\n\t});\n});\nmongoose.connection.on('reconnected', () => {\n\tlogger.info({\n\t\tmessage: 'Mongoose re-connected',\n\t\ttimestamp: `${chalk.yellow(moment(new Date().getTime()).format('LLLL'))}`,\n\t\tlevel: 'info',\n\t\tservice: 'Mongoose',\n\t\tenvironment: NODE_ENV\n\t});\n});\n\nexport default mongoose;\n"]}