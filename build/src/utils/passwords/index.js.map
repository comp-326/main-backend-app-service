{"version":3,"sources":["../../src/utils/passwords/index.ts"],"names":[],"mappings":";;;;;AACA,wDAAgC;AAEhC,MAAM,QAAQ;IAAd;QAKC,iBAAY,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;YACzC,MAAM,IAAI,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACxC,MAAM,cAAc,GAAG,MAAM,kBAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAE3D,OAAO,cAAc,CAAC;QACvB,CAAC,CAAC;QAQF,oBAAe,GAAG,KAAK,EAAE,QAAgB,EAAE,YAAoB,EAAE,EAAE;YAClE,MAAM,KAAK,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAE7D,OAAO,KAAK,CAAC;QACd,CAAC,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,IAAI,QAAQ,EAAE,CAAC","file":"index.js","sourcesContent":["import { IPassword } from '../../features/users/interfaces';\nimport bcryptjs from 'bcryptjs';\n\nclass Password implements IPassword{\n\t/**\n\t *\n\t * @param {string} password\n\t */\n\thashPassword = async (password: string) => {\n\t\tconst salt = await bcryptjs.genSalt(12);\n\t\tconst hashedPassword = await bcryptjs.hash(password, salt);\n\n\t\treturn hashedPassword;\n\t};\n\n\t/**\n\t *\n\t * @param {string} password\n\t * @param {string} passwordHash\n\t * @returns\n\t */\n\tcomparePassword = async (password: string, passwordHash: string) => {\n\t\tconst match = await bcryptjs.compare(password, passwordHash);\n\n\t\treturn match;\n\t};\n}\n\nexport default new Password();\n"]}