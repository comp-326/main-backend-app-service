{"version":3,"sources":["../../src/utils/jwt/tokenGEN.ts"],"names":[],"mappings":";;;;;AAAA,0DAAiC;AAEjC,yCAA+C;AAC/C,gEAA+B;AAE/B,MAAM,QAAQ;IAAd;QAkBQ,wBAAmB,GAAG,KAAK,EAAC,OAAsB,EAAC,EAAE;YAC3D,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,0BAAiB,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/E,CAAC,CAAC;QAEK,sBAAiB,GAAG,KAAK,EAAC,KAAY,EAAC,EAAE;YAC/C,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAC,KAAK,CAAC,CAAC;YAEpC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,0BAAiB,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC,CAAC;IACH,CAAC;IAxBO,oBAAoB,CAAC,OAAuB;QAClD,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,0BAAiB,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACrF,MAAM,cAAc,GAAG,mBAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,0BAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;QAEzF,OAAO,cAAc,CAAC;IACvB,CAAC;IAEM,kBAAkB,CAAC,KAAa;QACtC,MAAM,cAAc,GAAG,mBAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,0BAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,CACrF,mBAAQ,CAAC,GAAG,CAAC,IAAI,CACjB,CAAC;QAEF,OAAO,cAAc,CAAC;IACvB,CAAC;CAWD;AAED,kBAAe,IAAI,QAAQ,EAAE,CAAC","file":"tokenGEN.js","sourcesContent":["import CryptoJS from 'crypto-js';\nimport { JWTPayloadType } from '../../common/types';\nimport {environmentConfig} from '../../config';\nimport jwt from 'jsonwebtoken';\n\nclass TokenGEN{\n\t// constructor() {}\n\n\tpublic generateEncodedToken(payload: JWTPayloadType): string{\n\t\tconst token = jwt.sign(payload, environmentConfig.SECRET_KEY, { expiresIn: '270h' });\n\t\tconst encryptedToken = CryptoJS.AES.encrypt(token, environmentConfig.ENC_KEY).toString();\n\n\t\treturn encryptedToken;\n\t}\n\n\tpublic decodeEncodedToken(token: string): string{\n\t\tconst decryptedToken = CryptoJS.AES.decrypt(token, environmentConfig.ENC_KEY).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t);\n\n\t\treturn decryptedToken;\n\t}\n\n\tpublic generateSimpleToken = async(payload:JWTPayloadType)=>{\n\t\treturn jwt.sign(payload, environmentConfig.SECRET_KEY, { expiresIn: '24hr' });\n\t};\n\t\n\tpublic decodeSimpleToken = async(token:string)=>{\n\t\tconsole.log('\\n Decoding \\n',token);\n\t\t\n\t\treturn jwt.verify(token, environmentConfig.SECRET_KEY);\n\t};\n}\n\nexport default new TokenGEN();\n"]}